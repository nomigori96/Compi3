%{
#include "hw3_output.hpp"
#include "Semantic_types.hpp"
#include "ParserFunctions.hpp"
#include <string>

using namespace std;

extern int yylineno;

int yylex();
void yyerror(const char*);


%}

%union {
    char character;
    int numeric;
    string str;
    exp_t exp;
    type_t type;
    enumType_t enumType;
    call_t call;
    expList_t expList;
    dummy_t dummy;
    formals_t formals;
    formalList_t formalsList;
    formalDecl_t formalsDecl;
    retType_t retType;
    enumeratorList_t enumeratorList;
}

%token <character> B
%token <str> ID
%token <character> LPAREN
%nonassoc <character> RPAREN
%token <character> LBRACE
%token <character> RBRACE
%token <str> ENUM
%token <character> SC
%token <str> VOID
%token <character> COMMA
%token <str> RETURN
%token <str> BREAK
%token <str> IF
%token <str> CONTINUE
%nonassoc <str> ELSE
%token <str> WHILE
%token <str> INT
%token <str> BYTE
%token <str> BOOL
%token <numeric> NUM
%token <str> STRING
%token <str> TRUE
%token <str> FALSE
%right <character> ASSIGN
%left <character> OR
%left <character> AND
%left <character> EQUALITY
%nonassoc <character> RELATIONAL
%left <character> ADDITIVE
%left <character> MUL
%right <dummy> CAST
%right <str> NOT
%left <dummy> PARENS

%type <dummy> Program
%type <dummy> Funcs
%type <dummy> FuncDecl
%type <dummy> Enums
%type <dummy> EnumDecl
%type <retType> RetType
%type <formals> Formals
%type <formalsList> FormalsList
%type <formalsDecl> FormalsDecl
%type <enumeratorList> EnumeratorList
%type <dummy> Enumerator
%type <dummy> Statements
%type <dummy> Statement
%type <call> Call
%type <expList> ExpList
%type <type> Type
%type <enumType> EnumType
%type <exp> Exp

%%

Program:            Enums Funcs {
                        CheckMainExists()
                    };
Funcs:              {} |
                    FuncDecl Funcs {};
FuncDecl:           FuncDeclHeader Statements RBRACE {
                        CloseCurrentScope();
                    };
FuncDeclHeader:     RetType ID LPAREN Formals RPAREN LBRACE {
                        AddFunctionSymbolIfNotExists($2, *($4.args), *($1.type));
                        OpenNewScope();
                        AddFuncArgsToSymbolTable(*($4.args));
                        delete $4.args;
                        delete $1.type;
                    };
OpenScope:          {
                        OpenNewScope();
                    };
CloseScope:         {
                        CloseCurrentScope();
                    };
Enums:              {}|
                    EnumDecl Enums {};
EnumDecl:           ENUM ID LBRACE EnumeratorList RBRACE SC {
                        AddEnumSymbolIfNotExists($2, *($4.values));
                        delete $4.values;
                    };
RetType:            Type {$$.type = $1.type;}|
                    VOID {$$.type = new string("void");};
Formals:            {
                        $$.args = new vector<tuple<string, string, bool>>();
                    }|
                    FormalsList {
                        $$.args = $1.args;
                    };
FormalsList:        FormalDecl {
                        $$.args = new vector<tuple<string,string, bool>>();
                        tuple<string,string, bool>* argToAdd(*($1.type),
                                                             *($1.argName),
                                                             $1.is_enum_type);
                        $$.args.push_back(argToAdd);
                        delete $1.type;
                        delete $1.argName;
                    }|
                    FormalDecl COMMA FormalsList {
                        $$.args = $3.args;
                        tuple<string,string, bool>* argToAdd(*($1.type),
                                                             *($1.argName),
                                                             $1.is_enum_type);
                        $$.args.insert(*($$.args).begin(), argToAdd);
                        delete $1.type;
                        delete $1.argName;
                    };
FormalDecl:         Type ID {
                        $$.type = $1.type;
                        $$.argName = new string($2);
                        $$.isEnumType = false;
                    }|
                    EnumType ID {
                        $$.type = $1.typeName;
                        $$.argName = new string($2);
                        $$.isEnumType = true;
                    };
EnumeratorList:     Enumerator {
                        $$.values = new vector<string>();
                        $$.values->push_back(*($1.value));
                        delete $1.value;
                    }|
                    EnumeratorList COMMA Enumerator {
                        $$.values = $1.values;
                        $$.values->push_back(*($3.value));
                        delete $3.value;
                    };
Enumerator:         ID {
                        $$.value = new string($1);
                    };
Statements:         Statement {}|
                    Statements Statement {};
Statement:          LBRACE OpenScope Statements RBRACE CloseScope {}|
                    Type ID SC {}|
                    EnumType ID SC {}|
                    EnumDecl {}|
                    Type ID ASSIGN Exp SC {}|
                    EnumType ID ASSIGN Exp SC {}|
                    ID ASSIGN Exp SC {}|
                    Call SC {}|
                    RETURN SC {}|
                    RETURN Exp SC {}|
                    IF LPAREN Exp RPAREN  OpenScope Statement {
                        CloseCurrentScope();
                    }|
                    IF LPAREN Exp RPAREN OpenScope Statement CloseScope ELSE OpenScope Statement CloseScope {}|
                    WHILE LPAREN Exp RPAREN OpenScope Statement {
                        CloseCurrentScope();
                    }|
                    BREAK SC {}|
                    CONTINUE SC {};
Call:               ID LPAREN ExpList RPAREN {}|
                    ID LPAREN RPAREN {};
ExpList:            Exp {}|
                    Exp COMMA ExpList {};
Type:               INT {$$.type = new string("int");}|
                    BYTE {$$.type = new string("byte");}|
                    BOOL {$$.type = new string("bool");};
EnumType:           ENUM ID {};
Exp:                LPAREN Exp RPAREN %prec PARENS {}|
                    Exp ADDITIVE Exp {
                        vector<string> expected;
                        expected.push_back("int");
                        expected.push_back("byte");
                        CheckTypesMatch(expected, $1.type);
                        CheckTypesMatch(expected, $3.type);
                        $$.type = new string(DetermineBinopReturnType($1.type, $3.type));
                    }|
                    Exp MUL Exp {
                        vector<string> expected;
                        expected.push_back("int");
                        expected.push_back("byte");
                        CheckTypesMatch(expected, $1.type);
                        CheckTypesMatch(expected, $3.type);
                        $$.type = new string(DetermineBinopReturnType($1.type, $3.type));
                    }|
                    ID {}|
                    Call {}|
                    NUM {
                        $$.type = new string("int");
                    }|
                    NUM B {
                        $$.type = new string("byte");
                    }|
                    STRING {
                        $$.type = new string("string");
                    }|
                    TRUE {
                        $$.type = new string("bool");
                    }|
                    FALSE {
                        $$.type = new string("bool");
                    }|
                    NOT Exp {
                        vector<string> expected(1, "bool");
                        CheckTypesMatch(expected, $2.type);
                        $$.type = new string("bool");
                    }|
                    Exp AND Exp {
                        vector<string> expected(1, "bool");
                        CheckTypesMatch(expected, $1.type);
                        CheckTypesMatch(expected, $3.type);
                        $$.type = new string("bool");
                    }|
                    Exp OR Exp {
                        vector<string> expected(1, "bool");
                        CheckTypesMatch(expected, $1.type);
                        CheckTypesMatch(expected, $3.type);
                        $$.type = new string("bool");
                    }|
                    Exp RELATIONAL Exp {
                        vector<string> expected;
                        expected.push_back("int");
                        expected.push_back("byte");
                        CheckTypesMatch(expected, $1.type);
                        CheckTypesMatch(expected, $3.type);
                        $$.type = new string("bool");
                    }|
                    Exp EQUALITY Exp {
                        vector<string> expected;
                        expected.push_back("int");
                        expected.push_back("byte");
                        CheckTypesMatch(expected, $1.type);
                        CheckTypesMatch(expected, $3.type);
                        $$.type = new string("bool");
                    }|
                    LPAREN Type RPAREN Exp %prec CAST {};

%%

void yyerror(const char*){
    errorSyn(yylineno);
    exit(0);
}

int main(){
    return yyparse();
}