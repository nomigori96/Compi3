%{
#include <stdio.h>
#include <iostream>
#include "output.hpp"

using namespace std;
using namespace output;

extern int yylineno;

int yylex();
void yyerror(const char*);

%}
%token B
%token ID
%token LPAREN
%nonassoc RPAREN
%token LBRACE
%token RBRACE
%token ENUM
%token SC
%token VOID
%token COMMA
%token RETURN
%token BREAK
%token IF
%token CONTINUE
%nonassoc ELSE
%token WHILE
%token INT
%token BYTE
%token BOOL
%token NUM
%token STRING
%token TRUE
%token FALSE
%right ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELATIONAL
%left ADDITIVE
%left MUL
%right CAST
%right NOT
%left PARENS



%%

Program:        Enums Funcs {};
Funcs:          {} |
                FuncDecl Funcs {};
FuncDecl:       RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {};
Enums:          {}|
                EnumDecl Enums {};
EnumDecl:       ENUM ID LBRACE EnumeratorList RBRACE SC {};
RetType:        Type {}|
                VOID {};
Formals:        {}|
                FormalsList {};
FormalsList:    FormalDecl {}|
                FormalDecl COMMA FormalsList {};
FormalDecl:     Type ID {}|
                EnumType ID {};
EnumeratorList: Enumerator {}|
                EnumeratorList COMMA Enumerator {};
Enumerator:     ID {};
Statements:     Statement {}|
                Statements Statement {};
Statement:      LBRACE Statements RBRACE {}|
                Type ID SC {}|
                EnumType ID SC {}|
                EnumDecl {}|
                Type ID ASSIGN Exp SC {}|
                EnumType ID ASSIGN Exp SC {}|
                ID ASSIGN Exp SC {}|
                Call SC {}|
                RETURN SC {}|
                RETURN Exp SC {}|
                IF LPAREN Exp RPAREN Statement {}|
                IF LPAREN Exp RPAREN Statement ELSE Statement {}|
                WHILE LPAREN Exp RPAREN Statement {}|
                BREAK SC {}|
                CONTINUE SC {};
Call:           ID LPAREN ExpList RPAREN {}|
                ID LPAREN RPAREN {};
ExpList:        Exp {}|
                Exp COMMA ExpList {};
Type:           INT {}|
                BYTE {}|
                BOOL {};
EnumType:       ENUM ID {};
Exp:            LPAREN Exp RPAREN %prec PARENS {}|
                Exp ADDITIVE Exp {}|
                Exp MUL Exp {}|
                ID {}|
                Call {}|
                NUM {}|
                NUM B {}|
                STRING {}|
	            TRUE {}|
	            FALSE {}|
	            NOT Exp {}|
	            Exp AND Exp {}|
	            Exp OR Exp {}|
	            Exp RELATIONAL Exp {}|
	            Exp EQUALITY Exp {}|
	            LPAREN Type RPAREN Exp %prec CAST {};

%%

void yyerror(const char*){
    errorSyn(yylineno);
    exit(0);
}

int main(){
    return yyparse();
}